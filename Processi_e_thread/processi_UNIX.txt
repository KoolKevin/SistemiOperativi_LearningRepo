UNIX è un sistema operativo multiprogrammato a divisione di tempo

CARATTERISTICHE DEL PROCESSO UNIX:
processo pesante con CODICE RIENTRANTE!
    » dati NON condivisi
    » CODICE CONDIVISIBILE con altri processi

Ogni processo ha un proprio spazio di indirizzamento locale e non condiviso => Modello ad Ambiente Locale (o a scambio di messaggi)
Eccezione => il codice può essere condiviso (codice rientrante)

STATI DI UN PROCESSO UNIX
Come nel caso generale:
    - Init: caricamento in memoria del processo e inizializzazione delle strutture dati del SO
    - Ready: processo pronto
    - Running: il processo usa la CPU
    - Sleeping : il processo è sospeso in attesa di un evento (v. waiting)
    - Terminated: eliminazione del processo dalla memoria e dal SO
In aggiunta:
    - Zombie: il processo è terminato, ma è in attesa che il padre ne rilevi lo stato di terminazione
    - Swapped: il processo (o parte di esso) è temporaneamente trasferito in memoria secondaria

PROCESSI SWAPPED
Lo scheduler a medio termine (swapper) gestisce i trasferimenti dei processi
    - da memoria centrale a secondaria (dispositivo di swap): swap out
        - si applica preferibilmente ai processi bloccati (sleeping), prendendo in considerazione tempo di attesa, di permanenza in memoria e dimensione del
          processo (preferibilmente i processi più lunghi)
    - da memoria secondaria a centrale: swap in
        - si applica preferibilmente ai processi più corti

---RAPPRESENTAZIONE DEI PROCESSI UNIX
Il codice dei processi è rientrante: più processi possono condividere lo stesso codice (text)
    - Codice e dati sono separati (modello a codice puro)
    - SO gestisce una struttura dati globale in cui sono contenuti i puntatori ai codici utilizzati (eventualmente condivisi) dai processi: TEXT TABLE
    - L’elemento della text table si chiama TEXT STRUCTURE e contiene:
        - puntatore al codice (se il processo è swapped, riferimento a memoria secondaria)
        - numero dei processi che lo condividono

Process control block: il descrittore del processo in UNIX è rappresentato da 2 strutture dati distinte:
    • Process structure: informazioni necessarie al sistema per la gestione del processo (a prescindere dallo stato in cui si trova il processo)
    • User structure: informazioni necessarie solo se il processo è residente in memoria centrale

PROCESS STRUCTURE
contiene, tra le altre, le seguenti informazioni:
    • Un valore intero non negativo che rappresenta l’identificatore unico del processo (Process IDentifier, PID)
    • Lo stato del processo
    • puntatori alle aree dati e stack associati al processo
    • riferimento indiretto al codice, ovvero il riferimento all’elemento della text table (text structure) associato al codice del processo
    • informazioni di scheduling (es: priorità, tempo di CPU, …)
    • riferimento al processo padre ovvero il PID del padre;
    • informazioni relative alla gestione di segnali (es. segnali inviati ma non ancora gestiti, v. segnali..)
    • Puntatore al processo successivo nella coda di processi (ad esempio, ready queue) alla quale il processo eventualmente appartiene
    • puntatore alla User Structure

Tutte le Process structure sono organizzate in un vettore gestito dal sisstema operativo: PROCESS TABLE

USER STRUCTURE
Contiene le informazioni necessarie al SO per la gestione del processo, quando è residente in memoria (ovvero non è swapped)
    • copia dei registri di CPU (Program Counter, ecc.)
    • informazioni sulle risorse allocate (file aperti)
    • informazioni sulla gestione di segnali (puntatori a handler, ecc., v. segnali..)
    • ambiente del processo: direttorio corrente, utente, gruppo, argc/argv, path, ...

IMMAGINE DI UN PROCESSO UNIX
L’immagine di un processo è l’insieme delle aree di memoria e strutture dati associate al processo.
• Protezione: Non tutta l’immagine è accessibile in modo user:
    - parte di kernel
    - parte di utente
• Presenza in memoria centrale: Ogni processo può essere soggetto a swapping. in questo caso non tutta l’immagine può essere trasferita in memoria
    - parte swappable
    - parte residente o non swappable

Componenti:
    • process structure: è l’elemento della process table associato al processo (kernel, residente)
    • user structure: struttura dati contenente i dati necessari al kernel per la gestione del processo quando è residente (kernel, swappable)
    • text struct: elemento della text table associato al codice del processo (kernel, residente)
    • area di codice: contiene il codice del programma eseguito dal processo (user, swappable)
    • area dati globali di utente: contiene le variabili globali del programma eseguito dal processo (user, swappable)
    • stack, heap di utente: aree dinamiche associate al programma eseguito (user, swappable)
    • stack del kernel: stack di sistema associato al processo per le chiamate a system call (kernel, swappable)

NB:
• Process structure: risiede sempre in memoria centrale e mantiene le informazioni necessarie per la gestione del processo in ogni stato (anche se il processo è swapped)
• User structure: il suo contenuto è necessario solo in caso di esecuzione del processo (stato running): se il processo è soggetto a swapping, anche la user
  structure può essere trasferita in memoria secondaria.

    => PCB = process structure + user structure (guarda immagine slide 14).

--- SYSTEM CALL PER LA GESTIONE DEI PROCESSI
Chiamate di sistema per:
    - creazione di processi: fork()
    - terminazione: exit()
    - sospensione in attesa della terminazione di figli: wait()
    - sostituzione di codice e dati: exec...()

N.B. System call di UNIX sono attivabili attraverso chiamate a funzioni di librerie C standard: 
     fork(), exec(), ... sono quindi funzioni di libreria che chiamano le system call corrispondenti.

    => guarda da slide 18 in poi per vedere nel dettaglio tutte le conseguenze di queste chiamate a system call 