Quali sono le componenti di un SO?
    • gestione dei processi
    • gestione della memoria centrale
    • gestione di memoria secondaria e file system
    • gestione dell’I/O
    • protezione e sicurezza
    • interfaccia utente/programmatore
-> Quali sono le relazioni mutue tra le componenti?

GESTIONE DEI PROCESSI
Il programma è un’entità passiva (un insieme di byte contenente le istruzioni che dovranno essere eseguite)
Il processo è un’entità attiva:
    • è l’unità di lavoro/esecuzione all’interno del sistema. Ogni attività all’interno del SO è rappresentata da un processo.
    • è l’istanza di un programma in esecuzione.
-> Processo = programma in esecuzione
-> Processo = programma + contesto di esecuzione (PC, registri, …)

In un sistema multiprogrammato: più processi possono essere simultaneamente presenti nel sistema
Ruolo cruciale del SO in:
    • creazione/terminazione dei processi
    • sospensione/ripristino dei processi
    • sincronizzazione/comunicazione dei processi
    • gestione del blocco critico (deadlock) di processi

GESTIONE DELLA MEMORIA CENTRALE
HW di sistema di elaborazione è equipaggiato con un unico spazio di memoria accessibile direttamente da CPU e dispositivi.
Compito del SO:
    • separare gli spazi di indirizzi associati ai processi
    • allocare/deallocare memoria ai processi
    • memoria virtuale - gestire spazi logici di indirizzi di dimensioni complessivamente superiori allo spazio fisico
    • realizzare i collegamenti (binding) tra memoria logica e memoria fisica

GESTIONE DELLA MEMORIA SECONDARIA 
Tra tutti i dispositivi, la memoria secondaria riveste un ruolo particolarmente importante:
    • allocazione/deallocazione di spazio
    • gestione dello spazio libero
    • scheduling delle operazioni sul disco
Di solito:
    • la gestione dei file usa i meccanismi di gestione della memoria secondaria
    • la gestione della memoria secondaria è indipendente da come vengono gestiti i file
GESTIONE DEL FILE SYSTEM
Ogni sistema di elaborazione dispone di uno o più dispositivi per la memorizzazione persistente delle informazioni (memoria secondaria)
Compito del SO: fornire una visione logica uniforme della memoria secondaria (indipendente dal tipo e dal numero dei dispositivi)!
    • realizzare il concetto astratto di file, come unità di memorizzazione logica
    • fornire una struttura astratta per l’organizzazione dei file (directory)
    • creazione/cancellazione di file e directory
    • manipolazione di file/ directory
    • associazione tra file e dispositivi di memorizzazione secondaria
-> Spesso file, directory e dispositivi di I/O vengono presentati a utenti/programmi in modo uniforme come file.

GESTIONE DEI DISPOSITIVI DI I/O
Gestione dell’I/O rappresenta una parte importante del SO:
    • interfaccia tra programmi e dispositivi
    • per ogni dispositivo: device driver
        - routine per l’interazione con un particolare dispositivo
        - contiene conoscenza specifica sul dispositivo (ad es., routine di gestione delle interruzioni)

PROTEZIONE e SICUREZZA
In un sistema multiprogrammato, più entità (processi o utenti) possono utilizzare le risorse del sistema contemporaneamente -> necessità di protezione
Protezione: controllo dell’accesso alle risorse del sistema da parte di processi (e utenti) mediante
    • autorizzazioni
    • modalità di accesso
Risorse da proteggere:
    • memoria
    • processi
    • file
    • dispositivi
Sicurezza: se il sistema appartiene a una rete, la sicurezza misura l’affidabilità del sistema nei confronti di accessi indesiderati 
           e potenzialmente malevoli (attacchi) dal mondo esterno

INTERFACCIA UTENTE
SO presenta un’interfaccia che consente l’interazione con l’utente. Due alternative:
    • interprete comandi (shell): l’interazione avviene mediante una linea di comando.
    • interfaccia grafica (graphical user interface, GUI): l’interazione avviene mediante interazione con elementi grafici sul desktop; di solito è organizzata a finestre.

INTERFACCIA PROGRAMMATORE
L’interfaccia del SO verso i processi è rappresentato dalla API che rende disponibili le SYSTEM CALL!
    • mediante la system call il processo richiede al SO l’esecuzione di un servizio
    • la system call esegue istruzioni privilegiate: passaggio da modo user a modo kernel
Classi di system call:
    • gestione dei processi
    • gestione di file e di dispositivi (spesso trattati in modo omogeneo)
    • gestione informazioni di sistema
    • comunicazione/sincronizzazione tra processi
    
    -> DEF: Programma di sistema = programma che chiama system call

NB: Le componenti non sono indipendenti tra loro, ma interagiscono!!!